#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv {
    acceleration-exponent = <2>;
    time-to-max-speed-ms = <250>;
};

/ {
    behaviors {
        ht_bck: ht_bck {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BCK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <140>;
            flavor = "balanced";
            hold-trigger-key-positions = <12>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        lhmrow: lhmrow {
            compatible = "zmk,behavior-hold-tap";
            label = "LHMROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            quick-tap-ms = <30>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <38 39 40 6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 36 37 41 42 43 31>;
        };

        rhmrow: rhmrow {
            compatible = "zmk,behavior-hold-tap";
            label = "RHMROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            quick-tap-ms = <30>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 30 38 39 40 41 42 43>;
        };

        mk_capt: mk_capt {
            compatible = "zmk,behavior-tap-dance";
            label = "MK_CAPT";
            #binding-cells = <0>;
            bindings =
                <&ht LS(LC(LG(N4))) LS(LG(N2))>,
                <&ht LG(LS(N5)) LG(LS(N4))>;

            tapping-term-ms = <165>;
        };

        it_e: it_e {
            compatible = "zmk,behavior-hold-tap";
            label = "IT_E";
            bindings = <&it_shift_egrav>, <&it_egrav>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        dt_ameth: dt_ameth {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_AMETH";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(O))>, <&kp LA(LS(D))>, <&kp LA(LS(J))>;

            tapping-term-ms = <165>;
        };

        cat_nav_sh: cat_nav_sh {
            compatible = "zmk,behavior-tap-dance";
            label = "CAT_NAV_SH";
            #binding-cells = <0>;
            bindings = <&ht LEFT_SHIFT LS(LA(LG(SLASH)))>, <&to 2>;

            tapping-term-ms = <200>;
        };

        cat_sh_hml: cat_sh_hml {
            compatible = "zmk,behavior-tap-dance";
            label = "CAT_SH_HML";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&ht LEFT_SHIFT LS(LA(LG(SLASH)))>, <&none>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2>;
        };

        Del {
            bindings = <&kp DELETE>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2>;
        };

        toLayerZero {
            bindings = <&to 0>;
            key-positions = <24 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2>;
        };

        cmd_shift_left {
            bindings = <&kp LG(LSHIFT)>;
            key-positions = <15 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        cmd_shift_right {
            bindings = <&kp RG(LSHIFT)>;
            key-positions = <20 19>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };
    };

    macros {
        it_egrav: it_egrav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp LEFT_BRACKET &kp LA(LG(LC(E)))>;
            label = "IT_EGRAV";
            wait-ms = <30>;
        };

        it_shift_egrav: it_shift_egrav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp LS(LEFT_BRACKET) &kp LA(LG(LC(E)))>;
            label = "IT_SHIFT_EGRAV";
            wait-ms = <30>;
        };

        it_i: it_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp EQUAL &kp LA(LG(LC(E)))>;
            label = "IT_I";
            wait-ms = <30>;
        };

        it_o: it_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp SEMICOLON &kp LA(LG(LC(E)))>;
            label = "IT_O";
            wait-ms = <30>;
        };

        it_u: it_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp BACKSLASH &kp LA(LG(LC(E)))>;
            label = "IT_U";
            wait-ms = <30>;
        };

        it_a: it_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp SQT &kp LA(LG(LC(E)))>;
            label = "IT_A";
            wait-ms = <30>;
        };

        efp: efp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp F &kp P>;
            label = "EFP";
            wait-ms = <20>;
        };

        laugh: laugh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp L &kp A>;
            label = "LAUGH";
            wait-ms = <20>;
        };

        eok: eok {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp O &kp K>;
            label = "EOK";
            wait-ms = <20>;
        };

        ethank: ethank {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp T &kp H>;
            label = "ETHANK";
            wait-ms = <20>;
        };

        esmile: esmile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp S &kp M>;
            label = "ESMILE";
            wait-ms = <20>;
        };

        esad: esad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp S &kp A &kp D>;
            label = "ESAD";
            wait-ms = <20>;
        };

        elove: elove {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp L &kp V>;
            label = "ELOVE";
            wait-ms = <20>;
        };

        ehmmm: ehmmm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp H &kp M>;
            label = "EHMMM";
            wait-ms = <20>;
        };

        ecoffe: ecoffe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp C &kp F>;
            label = "ECOFFE";
            wait-ms = <20>;
        };

        doublecmd: doublecmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCMD &kp LCMD>;
            label = "DOUBLECMD";
            wait-ms = <20>;
        };

        doublectrl: doublectrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LCTRL>;
            label = "DOUBLECTRL";
            wait-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak {
            bindings = <
&ht LS(TAB) TAB             &kp Q            &kp W           &kp F                 &kp P           &kp G                               &kp J           &kp L           &kp U                  &kp Y                    &kp SEMI         &kp BSLH
&ht_bck LA(BSPC) BACKSPACE  &lhmrow LCTRL A  &lhmrow LALT R  &lhmrow LEFT_SHIFT S  &lhmrow LCMD T  &kp D                               &kp H           &rhmrow RCMD N  &rhmrow RIGHT_SHIFT E  &rhmrow RIGHT_ALT I      &rhmrow RCTRL O  &kp SQT
&cat_nav_sh                 &kp Z            &kp X           &kp C                 &kp V           &kp B           &trans  &kp C_MUTE  &kp K           &kp M           &ht LESS_THAN COMMA    &ht GREATER_THAN PERIOD  &kp FSLH         &kp RSHFT
                                                             &lt 4 LG(SPACE)       &lt 1 SPACE     &ht LCMD ENTER                      &ht RCMD ENTER  &lt 2 SPACE     &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
            label = "Colemak";
        };

        Numbers {
            bindings = <
&trans         &kp LS(EXCL)                 &kp LS(AT)                     &kp LS(POUND)               &kp LS(DLLR)                 &kp LS(PRCNT)                &kp LS(CARET)   &kp LS(AMPS)          &kp LS(STAR)       &kp LS(LPAR)          &kp LS(RPAR)      &kp CAPSLOCK
&kp BACKSPACE  &lhmrow LCTRL N1             &lhmrow LEFT_ALT N2            &lhmrow LEFT_SHIFT N3       &lhmrow LCMD N4              &kp N5                       &kp N6          &rhmrow RCMD N7       &rhmrow RSHIFT N8  &rhmrow RIGHT_ALT N9  &rhmrow RCTRL N0  &ht PLUS EQUAL
&mk_capt       &ht LEFT_BRACE LEFT_BRACKET  &ht RIGHT_BRACE RIGHT_BRACKET  &ht LC(LA(LS(W))) LC(LEFT)  &ht LC(LA(LS(E))) LC(RIGHT)  &dt_ameth      &none  &none  &ht PLUS EQUAL  &ht UNDERSCORE MINUS  &trans             &trans                &trans            &ht GRAVE TILDE
                                                                           &kp LS(LA(B))               &trans                       &trans                       &trans          &trans                &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>,
                <&inc_dec_kp PG_UP PG_DN>;

            label = "Numbers";
        };

        Move {
            bindings = <
&trans       &trans  &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_DOWN   &trans                         &kp DEL       &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &trans    &kp PAGE_UP
&trans       &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp ENTER                      &kp LG(UP)    &kp LEFT      &kp DOWN  &kp RIGHT      &kp INS   &kp PAGE_DOWN
&cat_sh_hml  &trans  &msc SCRL_LEFT  &trans          &msc SCRL_RIGHT  &kp SPACE  &none  &bootloader  &kp LG(DOWN)  &kp LG(LEFT)  &trans    &kp LG(RIGHT)  &kp HOME  &kp END
                                     &trans          &mkp LCLK        &mkp RCLK                      &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
            label = "Move";
        };

        Italian {
            bindings = <
&kp C_PREV  &kp C_PP          &kp C_NEXT  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                 &trans      &trans      &it_u       &trans      &trans      &trans
&trans      &it_a             &trans      &trans      &kp C_BRI_DN  &kp C_BRI_UP                 &trans      &trans      &it_e 0 0   &it_i       &it_o       &trans
&trans      &kp LG(NUMBER_1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)    &kp LG(N5)    &none  &trans  &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)  &trans
                                          &trans      &trans        &trans                       &trans      &trans      &trans
            >;

            label = "Italian";
        };

        Emoji {
            bindings = <
&trans  &trans  &elove   &efp        &ehmmm       &trans                 &trans  &trans  &trans  &trans  &trans  &trans
&trans  &laugh  &esmile  &eok        &ethank      &esad                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans   &doublecmd  &doublectrl  &trans  &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans      &trans       &trans                 &trans  &trans  &trans
            >;

            label = "Emoji";
        };

        Bt_Sys {
            label = "Bt-Sys";
            bindings = <
&kp F1       &kp F2           &kp F3           &kp F4           &kp F5           &kp F6                         &kp F7           &kp F8           &kp F9           &kp F10          &kp F11          &kp F12
&bt BT_CLR   &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                   &trans           &kp LCMD         &kp LEFT_SHIFT   &kp LALT         &kp LCTRL        &rgb_ug RGB_TOG
&bootloader  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD  &none  &none  &rgb_ug RGB_BRI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &bootloader
                                               &trans           &trans           &sys_reset                     &sys_reset       &trans           &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Bt-Sys {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
